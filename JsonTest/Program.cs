using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.IO;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;


namespace JsonTest
{
    internal class Program
    {
        public static void Main()
        {
            const string path = @"D:\Program Files\Files\";
            const string inputFile = "Data.json";
            const string outputFile = "OutputData.json";
            string jsonData = new StreamReader(Path.Combine(path, inputFile)).ReadToEnd();
            //File.WriteAllText(Path.Combine(path, "Data.json"), data.ToJson());
            //Попробуем JArray
            var jObject = JObject.Parse(jsonData);
            var jArray = jObject.First.First;
            //Console.WriteLine(jArray.Type);
            var list = jArray.ToObject<List<Accounts>>();
            foreach (var value in list)
            {
                Console.WriteLine($"{value.Login}\n{value.Password}\n{value.AccessToken}\n");
                value.Groups.ToObject<List<string>>().ForEach(x => Console.WriteLine(x));
            }

            var newList = list;
            var sb = new StringBuilder();
            foreach (var account in newList)
            {
                sb.Clear();
                account.Login = sb.AppendFormat(account.Login, " it is new login").ToString();
                sb.Clear();
                account.Password = sb.AppendFormat(account.Password, " it is new login").ToString();
                sb.Clear();
                account.Password = sb.AppendFormat(account.Password, " it is new password").ToString();
                sb.Clear();
                account.AccessToken = sb.AppendFormat(account.AccessToken, " it is new accesstoken").ToString();
                var count = account.Groups.Count();
                for (int i = 0; i < count; i++)
                {
                    var value = account.Groups[i].ToObject<long>() + 10000;
                    account.Groups[i] = value;
                    account.Groups.Add(account.Login);
                }
            }

            string output = JsonConvert.SerializeObject(newList, Formatting.Indented);
            var streamWriter = new StreamWriter(Path.Combine(path, outputFile));
            streamWriter.Write(output);
            streamWriter.Close();
        }

        public class Accounts
        {
            [JsonProperty("Login")] public string Login;
            [JsonProperty("Password")] public string Password;
            [JsonProperty("AccessToken")] public string AccessToken;
            [JsonProperty("Groups")] public JArray Groups;
        }
    }
}

/*кодина для работы со статик классом
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var data = Data.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Data
    {
        [JsonProperty("Accounts")]
        public Account[] Accounts { get; set; }
    }

    public partial class Account
    {
        [JsonProperty("Login")]
        public string Login { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }

        [JsonProperty("AccessToken")]
        public string AccessToken { get; set; }

        [JsonProperty("Groups")]
        public long[] Groups { get; set; }
    }

    public partial class Data
    {
        public static Data FromJson(string json) => JsonConvert.DeserializeObject<Data>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Data self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}



public static void Main()
        {
            //string editString = " was edited";
            //long editLong = 20000;
            string path = @"D:\Program Files\Files\";
            ////FileStream fstream = File.OpenRead(Path.Combine(path, "Data.json"));
            //var data = Data.FromJson(File.ReadAllText(Path.Combine(path, "Data.json")));
            ////Console.WriteLine(data.Accounts[0].Groups[0]);
            //foreach (var value in data.Accounts)
            //{
            //    Console.WriteLine(value.AccessToken);
            //    Console.WriteLine(value.Login);
            //    Console.WriteLine(value.Password);
            //    foreach (var group in value.Groups)
            //    {
            //        Console.WriteLine(group);
            //    }
            //}
            //foreach (var value in data.Accounts)
            //{
            //    value.AccessToken += editString;
            //    value.Login += editString;
            //    value.Password += editString;
            //    for (int i = 0; i < 3; i++)
            //    {
            //        value.Groups[i] += editLong;
            //    }
            //}
            //File.WriteAllText(Path.Combine(path, "Data.json"), data.ToJson());
        }
*/
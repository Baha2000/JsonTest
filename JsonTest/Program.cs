using System;
using System.Collections.Generic;
using System.Globalization;
using QuickType;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.IO;
using Newtonsoft.Json.Linq;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var data = Data.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Data
    {
        [JsonProperty("Accounts")]
        public Account[] Accounts { get; set; }
    }

    public partial class Account
    {
        [JsonProperty("Login")]
        public string Login { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }

        [JsonProperty("AccessToken")]
        public string AccessToken { get; set; }

        [JsonProperty("Groups")]
        public long[] Groups { get; set; }
    }

    public partial class Data
    {
        public static Data FromJson(string json) => JsonConvert.DeserializeObject<Data>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Data self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}



namespace JsonTest
{
    internal class Program
    {

        public static void Main()
        {
            //string editString = " was edited";
            //long editLong = 20000;
            string path = @"D:\Program Files\Files\";
            ////FileStream fstream = File.OpenRead(Path.Combine(path, "Data.json"));
            //var data = Data.FromJson(File.ReadAllText(Path.Combine(path, "Data.json")));
            ////Console.WriteLine(data.Accounts[0].Groups[0]);
            //foreach (var value in data.Accounts)
            //{
            //    Console.WriteLine(value.AccessToken);
            //    Console.WriteLine(value.Login);
            //    Console.WriteLine(value.Password);
            //    foreach (var group in value.Groups)
            //    {
            //        Console.WriteLine(group);
            //    }
            //}
            //foreach (var value in data.Accounts)
            //{
            //    value.AccessToken += editString;
            //    value.Login += editString;
            //    value.Password += editString;
            //    for (int i = 0; i < 3; i++)
            //    {
            //        value.Groups[i] += editLong;
            //    }
            //}
            //File.WriteAllText(Path.Combine(path, "Data.json"), data.ToJson());
            //Попробуем JArray
            JObject jObject = JObject.Parse(File.ReadAllText(Path.Combine(path, "Data.json")));
            var reader = jObject.CreateReader();
            Console.WriteLine(reader.Read());
        }
    }
}